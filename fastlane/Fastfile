fastlane_version "1.48.0"

default_platform :ios

platform :ios do

    before_all do |lane|
        if lane == :test || lane == :submitAppToTestflight || lane == :releaseOpenSourceFramework || lane == :releaseOpenSourceProject
            ensure_git_status_clean
        end
    end

    after_all do |lane|
        # In case tests need to have dependencies updated, reset any changes at the end
        if lane == :test
            resetGitRepo
        end
    end

    error do |lane, exception|
        if is_ci?
            if lane == :test || lane == :submitAppToTestflight || lane == :releaseOpenSourceFramework || lane == :releaseOpenSourceProject
                resetGitRepo
            end
        end
    end

  desc "Runs all tests"
  desc "Optionally override the updateDependencies lane to make sure tests use the latest version of certain dependencies"
  lane :test do
    updateDependencies
    runAllTests
  end

  desc "Submits app to TestFlight"
  desc "Optional parameter: buildNumber (if not provided, build number is incremented by 1)"
  lane :submitAppToTestflight do |options|
    ensureGitBranch
    #runAllTests
    incrementBuildNumber(options)
    manageProvisioningProfiles
    build
    uploadToTestFlight
    commitBuildNumberBump
    addBuildGitTag
    pushToGitRemote
    afterSubmitAppToTestflight
  end

  desc "Manages provisioning profiles using sigh"
  desc "Override this lane to provide custom provisioning profile management (e.g. app with multiple bundle IDs)"
  lane :manageProvisioningProfiles do
    sigh
  end

    desc "Update dependencies (default behaviour does nothing)"
    desc "Override this lane to provide custom behaviour (e.g. make sure that certain dependencies are updated to their latest versions)"
    lane :updateDependencies do
    end

    desc "What to do after app is successfully submitted to TestFlight"
    desc "Override this lane to provide custom behaviour"
    lane :afterSubmitAppToTestflight do
    end

  desc "Updates version number"
  desc "It also updates the podspec version, if one exists"
  desc "Optional parameter: versionNumber (if not provided, patch version number is incremented by 1)"
  lane :updateVersionNumber do |options|
    unless options[:versionNumber].nil? || options[:versionNumber].empty?
		ENV['FL_VERSION_NUMBER_VERSION_NUMBER'] = options[:versionNumber]
    end
    increment_version_number(
        xcodeproj: ENV['IFA_XCODE_PROJECT'],
    )
	updatePodspecVersionNumber
  end

  desc "Gets version number"
  lane :getVersionNumber do
    get_version_number(
        xcodeproj: ENV['IFA_XCODE_PROJECT']
    )
  end

  desc "Release new version of open source framework"
  desc "Required parameter: gitHubPersonalAccessToken"
  desc "Optional parameter: versionNumber (if not provided, patch version number is incremented by 1)"
  lane :releaseOpenSourceFramework do |options|
    ensureGitBranch
    #updateDependencies
    #runAllTests
    updateVersionNumber(options)
    commitNewFrameworkVersionRelease
    pushToGitRemote
    gitMergeIntoRemoteMasterBranch
    gitHubRelease(options)
    pod_push
  end

  desc "Release new version of open source project"
  desc "Required parameter: gitHubPersonalAccessToken"
  desc "Optional parameter: versionNumber (if not provided, a file named 'Version.txt' is expected at the project's root directory)"
  lane :releaseOpenSourceProject do |options|
    ensureGitBranch
    gitMergeIntoRemoteMasterBranch
    gitHubRelease(options)
  end

  #################
  # PRIVATE LANES #
  #################

  private_lane :ensureGitBranch do
    ensure_git_branch(
        branch: ENV['IFA_GIT_BRANCH']
    )
  end

  private_lane :incrementBuildNumber do |options|
    increment_build_number(
        xcodeproj: ENV['IFA_XCODE_PROJECT'],
        build_number: options[:buildNumber]
    )
  end

  private_lane :runAllTests do
    scan(
        workspace: ENV['IFA_XCODE_WORKSPACE'],
        scheme: ENV['IFA_XCODE_SCHEME'],
        skip_slack: true
    )
  end

  private_lane :build do
    gym(
        workspace: ENV['IFA_XCODE_WORKSPACE'],
        scheme: ENV['IFA_XCODE_SCHEME'],
        clean: true
    )
  end

  private_lane :uploadToTestFlight do
    pilot(
        skip_submission: true,
        changelog: File.read(ENV['IFA_CHANGELOG'])
    )
  end

  private_lane :commitBuildNumberBump do
    commit_version_bump(
        message: "Build number bump",
        xcodeproj: ENV['IFA_XCODE_PROJECT']
    )
  end

  private_lane :commitVersionNumberBump do
    commit_version_bump(
        message: "Version number bump",
        xcodeproj: ENV['IFA_XCODE_PROJECT']
    )
  end

  private_lane :addBuildGitTag do
    buildNumber = get_build_number(xcodeproj: ENV['IFA_XCODE_PROJECT'])
    add_git_tag(
        tag: "build-#{buildNumber}"
    )
  end

  private_lane :addVersionGitTag do
    versionNumber = get_version_number(xcodeproj: ENV['IFA_XCODE_PROJECT'])
    add_git_tag(
        tag: "v#{versionNumber}"
    )
  end

  private_lane :pushToGitRemote do
    push_to_git_remote(
      local_branch: ENV['IFA_GIT_BRANCH']
    )
  end

  private_lane :resetGitRepo do
    reset_git_repo(
        force: true,
        disregard_gitignore: true
    )
  end

  private_lane :updatePodspecVersionNumber do
  	# Only useful if a podspec exists (i.e. most likely it is a framework)
  	if !Dir.glob('../*.podspec').empty?
  		version_bump_podspec(
    		version_number: getVersionNumber
    	)
  	end
  end

  private_lane :commitNewFrameworkVersionRelease do
    sh "git add -A && git commit -m 'New version release'"
  end

  private_lane :gitMergeIntoRemoteMasterBranch do
    branchName = ENV['IFA_GIT_BRANCH']
    sh "git checkout master && git pull origin master && git merge #{branchName} && git push origin master && git checkout #{branchName} && git pull origin #{branchName}"
  end

  private_lane :gitHubRelease do |options|
    if options[:versionNumber].nil? || options[:versionNumber].empty?
    	versionNumber = File.read('../Version.txt')
    	if versionNumber.nil? || versionNumber.empty?
	    	versionNumber = get_version_number(xcodeproj: ENV['IFA_XCODE_PROJECT'])
    	end
    else
    	versionNumber = options[:versionNumber]
    end
    ENV['FL_GITHUB_RELEASE_API_TOKEN'] = options[:gitHubPersonalAccessToken]
    set_github_release(
      repository_name: ENV['IFA_GITHUB_REPOSITORY'],
      tag_name: "v#{versionNumber}",
      description: File.read(ENV['IFA_CHANGELOG']),
      name: "",
    )
  end

end
